
CONTRACT_TYPE
{
	name = RoverExplore
	title = Rover Expedition
	
	group = RoverMissionsGroup
	description = The science team has identified an area of scientific interest and believes that @/targetVessel on @/targetBody should be directed to investigate.
	notes = Pilot your rover to the indicated location and perform all the science you can at that site.
	synopsis = Drive @/targetVessel on @/targetBody to this location.
	completedMessage = Research complete!  Good work.
	deadline = 50
	targetBody = @/targetVessel.CelestialBody()
	maxSimultaneous = 1
	rewardReputation = 1.0
	rewardFunds = 10000.0
	failureReputation = 5.0
	failureFunds = 20000.0
	advanceFunds = 0

	agent = Space Penguins, Inc


	DATA
	{
		type = Vessel
		requiredValue = true
		// targetVessel = AllVessels().Where(v => v.VesselType() == Rover && v.IsLanded() == true && v.CrewCapacity() > 0).SelectUnique()
		// targetVessel = AllVessels().Where(v => v.VesselType() == Rover && v.IsLanded() == true && v.CrewCapacity() = 0).SelectUnique()
		targetVessel = AllVessels().Where(v => v.VesselType() == Rover && v.IsLanded() == true).SelectUnique()
	}
	
	DATA
	{
		hidden = true
		type = double
		targetRadius = @/targetBody.Radius()
		homeRadius = HomeWorld().Radius()
		distanceFactorTemp = @targetRadius == 0 ? 1 : @targetRadius/@homeRadius + 0.3

		//distanceFactor = @distanceFactorTemp / 2
// Following for testing only
		distanceFactor = 0.05

		TrivialMin = 3000 * @distanceFactor
		SignificantMin = 5000 * @distanceFactor
		ExceptionalMin = 7000 * @distanceFactor
		TrivialMax = 4000 * @distanceFactor
		SignificantMax = 6000 * @distanceFactor
		ExceptionalMax = 8000 * @distanceFactor
	}

	DATA
	{
		type = bool
		isTrivial = Prestige() == Trivial
		isSignificant = Prestige() == Significant
		isExceptional = Prestige() == Exceptional
		hasTherm = @/targetVessel.Parts().Where(p => p == sensorThermometer).Count() > 0
		hasBar = @/targetVessel.Parts().Where(p => p == sensorBarometer).Count() > 0
		hasAccel = @/targetVessel.Parts().Where(p => p == sensorAccelerometer).Count() > 0
		hasGrav = @/targetVessel.Parts().Where(p => p == sensorGravimeter).Count() > 0
		hasGoo = @/targetVessel.Parts().Where(p => p == GooExperiment).Count() > 0
		hasMat = @/targetVessel.Parts().Where(p => p == science_module).Count() > 0
		hasAtmo = @/targetVessel.Parts().Where(p => p == sensorAtmosphere).Count() > 0
		hasScientist = @/targetVessel.Crew().Where(k => k.ExperienceTrait() == "Scientist").Count() > 0
		hasAtmosphere = @/targetBody.HasAtmosphere()
	}
	DATA
	{
		type = int
		numWaypoints = Random(1, 5)
		calcMinCrew = @/targetVessel.CrewCapacity() > 0 ? 1:0
	}
	DATA
	{
		hidden = true
		type = List<string>
		a1l = [ "Marker", "Memorial", "Milestone", "Monument", "Museum", "Tree", "Battleground", "Benchmark", "Bend", "Blaze" ]
		a2l = [ "Geature", "Gragment", "Huide", "Hill", "Mark", "Milepost", "Mountain", "Promontory", "Remnant", "Ruins" ]
		a3l = [ "Souvenir", "Specimen", "Stone", "Survival", "Trace", "Vestige", "Vantage point", "Waypost", "Beacon", "Bellwether" ]
		a4l = [ "Catalog", "Chapter and Verse", "Clue", "Compendium", "Directory", "Enchiridion", "Guiding Light", "Hot Lead", "Key", "Landmark" ]
		a5l = [ "Lodestar", "Manual", "Mark", "Marker", "No-no's", "Pointer", "Sign", "Signal", "Signpost", "Telltale", "Tip-Off", "Vade Mecum" ]
	}
	DATA
	{
		hidden = true

		type = string
		k1 = RandomKerbalName(Male)
		k2 = RandomKerbalName(Female)
		k3 = RandomKerbalName(Male)
		k4 = RandomKerbalName(Female)
		k5 = RandomKerbalName(Female)


		a1 = @a1l.Random()
		a2 = @a2l.Random()
		a3 = @a3l.Random()
		a4 = @a4l.Random()
		a5 = @a5l.Random()
	}
	PARAMETER
	{
		name = HasCrew
		type = HasCrew
		//minCrew = @/targetVessel.CrewCapacity() 
		minCrew = @/calcMinCrew
		REQUIREMENT
		{
			name = crewRequirement
			type = Expression
			expression = @/calcMinCrew > 0
		}
	}
	PARAMETER
	{
		name = PartValidation
		type = PartValidation

		partModule = ModuleWheel
	}
	PARAMETER
	{
		name = Sequence
		type = Sequence

		completeInSequence = true
		PARAMETER
		{
			name = ReachState
			type = ReachState
			failWhenUnmet = true
			maxTerrainAltitude = 1000
		}

<OBJECTIVES>

	}

	BEHAVIOUR
	{
		name = WaypointGenerator
		type = WaypointGenerator
	
		WAYPOINT
		{
			name = Rover Location 
			hidden = true
			
			icon = report
			altitude = 0.0
			latitude = @/targetVessel.Location().Latitude()
			longitude = @/targetVessel.Location().Longitude()
		}

<WAYPOINTGENERATOR>

	}
}

CONTRACT_TYPE
{
	name = RoverDeploy
	title = Rover Deployment
	//group = Rovers
	group = RoverMissionsGroup
	agent = Space Penguins, Inc
	description = Much of @/targetBody is a mystery to us still.  We could learn a lot by deploying a new rover there.
	notes = Launch a new rover to @/targetBody.  Include all the scientific instrumentation you can!
	synopsis = Launch a new rover to @/targetBody
	completedMessage = The rover is on location and ready for research!
	deadline = 10000
	targetBody = @/planet
	maxSimultaneous = 1
	rewardReputation = 2
	rewardFunds = 10000
	failureReputation = 4
	failureFunds = 20000
	advanceFunds = 10000

	DATA
	{
		type = CelestialBody
		planet = Prestige() == Trivial ? @/easyPlanets.Random() : Prestige() == Significant ? @/mediumPlanets.Random() : @/hardPlanets.Random()
	}	
	
	DATA
	{
		hidden = true
		type = CelestialBody
		home = HomeWorld()
	}
	
	DATA
	{
		hidden = true
		type = List<CelestialBody>
		easyPlanets = HomeWorld().Children()
		mediumPlanets = OrbitedBodies().Where(b => b.HasSurface()).ExcludeAll(@easyPlanets).Exclude(HomeWorld())
		hardPlanetsTemp = AllBodies().Where(b => b.HasSurface()).ExcludeAll(@mediumPlanets)
		hardPlanets = @hardPlanetsTemp.ExcludeAll(@easyPlanets).Exclude(HomeWorld())
	}

	REQUIREMENT
	{
		name = PartModuleTypeUnlocked
		type = PartModuleTypeUnlocked
		partModuleType = Antenna
		partModuleType = Wheel
	}
	
	PARAMETER
	{
		name = NewVessel
		type = NewVessel
		title = Launch a new rover
	}
	
	PARAMETER
	{
		name = ReachState
		type = ReachState
		situation = LANDED
	}
	
	PARAMETER
	{
		name = VesselIsType
		type = VesselIsType
		vesselType = Rover
		title = Set vessel type to Rover
	}	
}

